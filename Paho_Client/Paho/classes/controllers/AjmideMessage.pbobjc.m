// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ajmideMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "AjmideMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AjmideMessageRoot

@implementation AjmideMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AjmideMessageRoot_FileDescriptor

static GPBFileDescriptor *AjmideMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CMD_TYPE

GPBEnumDescriptor *CMD_TYPE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CmdTypeStartlive\000CmdTypeEndlive\000CmdTypeN"
        "eedendlive\000CmdTypeStartmutelive\000CmdTypeE"
        "ndmutelive\000";
    static const int32_t values[] = {
        CMD_TYPE_CmdTypeStartlive,
        CMD_TYPE_CmdTypeEndlive,
        CMD_TYPE_CmdTypeNeedendlive,
        CMD_TYPE_CmdTypeStartmutelive,
        CMD_TYPE_CmdTypeEndmutelive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CMD_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CMD_TYPE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CMD_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case CMD_TYPE_CmdTypeStartlive:
    case CMD_TYPE_CmdTypeEndlive:
    case CMD_TYPE_CmdTypeNeedendlive:
    case CMD_TYPE_CmdTypeStartmutelive:
    case CMD_TYPE_CmdTypeEndmutelive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ResponseParseType

GPBEnumDescriptor *ResponseParseType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ResponseParseTypeChatMessageResponse\000Res"
        "ponseParseTypeGiftMessageResponse\000Respon"
        "seParseTypePluginMessageResponse\000Respons"
        "eParseTypeDistinguishMusicMessageRespons"
        "e\000";
    static const int32_t values[] = {
        ResponseParseType_ResponseParseTypeChatMessageResponse,
        ResponseParseType_ResponseParseTypeGiftMessageResponse,
        ResponseParseType_ResponseParseTypePluginMessageResponse,
        ResponseParseType_ResponseParseTypeDistinguishMusicMessageResponse,
    };
    static const char *extraTextFormatInfo = "\004\000\021\223\000\001\021\223\000\002\021\225\000\003\021\237\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResponseParseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResponseParseType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResponseParseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResponseParseType_ResponseParseTypeChatMessageResponse:
    case ResponseParseType_ResponseParseTypeGiftMessageResponse:
    case ResponseParseType_ResponseParseTypePluginMessageResponse:
    case ResponseParseType_ResponseParseTypeDistinguishMusicMessageResponse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChatMessageRequest

@implementation ChatMessageRequest

@dynamic type;
@dynamic msg;
@dynamic msgColor;
@dynamic img;
@dynamic time;
@dynamic insertTime;

typedef struct ChatMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  ChatMessageRequest_Msg_Type type;
  int32_t time;
  int32_t insertTime;
  NSString *msg;
  NSString *msgColor;
  NSString *img;
} ChatMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ChatMessageRequest_Msg_Type_EnumDescriptor,
        .number = ChatMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageRequest_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgColor",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageRequest_FieldNumber_MsgColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, msgColor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "img",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageRequest_FieldNumber_Img,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, img),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageRequest_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "insertTime",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageRequest_FieldNumber_InsertTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatMessageRequest__storage_, insertTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageRequest class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\010\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChatMessageRequest_Type_RawValue(ChatMessageRequest *message) {
  GPBDescriptor *descriptor = [ChatMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetChatMessageRequest_Type_RawValue(ChatMessageRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ChatMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChatMessageRequest_Msg_Type

GPBEnumDescriptor *ChatMessageRequest_Msg_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MsgTypeLabel\000MsgTypeImage\000";
    static const int32_t values[] = {
        ChatMessageRequest_Msg_Type_MsgTypeLabel,
        ChatMessageRequest_Msg_Type_MsgTypeImage,
    };
    static const char *extraTextFormatInfo = "\002\000\003\204\205\000\001\003\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatMessageRequest_Msg_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatMessageRequest_Msg_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatMessageRequest_Msg_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatMessageRequest_Msg_Type_MsgTypeLabel:
    case ChatMessageRequest_Msg_Type_MsgTypeImage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChatMessageResponse

@implementation ChatMessageResponse

@dynamic resultArray, resultArray_Count;

typedef struct ChatMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultArray;
} ChatMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatMessageResponse_Result),
        .number = ChatMessageResponse_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatMessageResponse__storage_, resultArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageResponse class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessageResponse_Result

@implementation ChatMessageResponse_Result

@dynamic msgId;
@dynamic type;
@dynamic msg;
@dynamic msgColor;
@dynamic img;
@dynamic time;
@dynamic insertTime;
@dynamic usernick;
@dynamic userrole;
@dynamic portrait;

typedef struct ChatMessageResponse_Result__storage_ {
  uint32_t _has_storage_[1];
  ChatMessageResponse_Result_Msg_Type type;
  int32_t time;
  int32_t insertTime;
  ChatMessageResponse_Result_Role_Type userrole;
  NSString *msgId;
  NSString *msg;
  NSString *msgColor;
  NSString *img;
  NSString *usernick;
  NSString *portrait;
} ChatMessageResponse_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ChatMessageResponse_Result_Msg_Type_EnumDescriptor,
        .number = ChatMessageResponse_Result_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgColor",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_MsgColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, msgColor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "img",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_Img,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, img),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "insertTime",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_InsertTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, insertTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "usernick",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_Usernick,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, usernick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userrole",
        .dataTypeSpecific.enumDescFunc = ChatMessageResponse_Result_Role_Type_EnumDescriptor,
        .number = ChatMessageResponse_Result_FieldNumber_Userrole,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, userrole),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "portrait",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageResponse_Result_FieldNumber_Portrait,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatMessageResponse_Result__storage_, portrait),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageResponse_Result class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageResponse_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\005\000\004\010\000\010\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChatMessageResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChatMessageResponse_Result_Type_RawValue(ChatMessageResponse_Result *message) {
  GPBDescriptor *descriptor = [ChatMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageResponse_Result_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetChatMessageResponse_Result_Type_RawValue(ChatMessageResponse_Result *message, int32_t value) {
  GPBDescriptor *descriptor = [ChatMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageResponse_Result_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ChatMessageResponse_Result_Userrole_RawValue(ChatMessageResponse_Result *message) {
  GPBDescriptor *descriptor = [ChatMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageResponse_Result_FieldNumber_Userrole];
  return GPBGetMessageInt32Field(message, field);
}

void SetChatMessageResponse_Result_Userrole_RawValue(ChatMessageResponse_Result *message, int32_t value) {
  GPBDescriptor *descriptor = [ChatMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChatMessageResponse_Result_FieldNumber_Userrole];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChatMessageResponse_Result_Msg_Type

GPBEnumDescriptor *ChatMessageResponse_Result_Msg_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MsgTypeLabel\000MsgTypeImage\000";
    static const int32_t values[] = {
        ChatMessageResponse_Result_Msg_Type_MsgTypeLabel,
        ChatMessageResponse_Result_Msg_Type_MsgTypeImage,
    };
    static const char *extraTextFormatInfo = "\002\000\003\204\205\000\001\003\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatMessageResponse_Result_Msg_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatMessageResponse_Result_Msg_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatMessageResponse_Result_Msg_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatMessageResponse_Result_Msg_Type_MsgTypeLabel:
    case ChatMessageResponse_Result_Msg_Type_MsgTypeImage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ChatMessageResponse_Result_Role_Type

GPBEnumDescriptor *ChatMessageResponse_Result_Role_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "RoleTypeUsual\000RoleTypeHost\000";
    static const int32_t values[] = {
        ChatMessageResponse_Result_Role_Type_RoleTypeUsual,
        ChatMessageResponse_Result_Role_Type_RoleTypeHost,
    };
    static const char *extraTextFormatInfo = "\002\000\004\204\205\000\001\004\204\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChatMessageResponse_Result_Role_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChatMessageResponse_Result_Role_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChatMessageResponse_Result_Role_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChatMessageResponse_Result_Role_Type_RoleTypeUsual:
    case ChatMessageResponse_Result_Role_Type_RoleTypeHost:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GiftMessageRequest

@implementation GiftMessageRequest

@dynamic type;
@dynamic presenterId;
@dynamic giftId;
@dynamic count;
@dynamic giftCode;
@dynamic time;

typedef struct GiftMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  GiftMessageRequest_Gift_Type type;
  int32_t count;
  int32_t giftCode;
  int32_t time;
  NSString *presenterId;
  NSString *giftId;
} GiftMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GiftMessageRequest_Gift_Type_EnumDescriptor,
        .number = GiftMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "presenterId",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageRequest_FieldNumber_PresenterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, presenterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageRequest_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, giftId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageRequest_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftCode",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageRequest_FieldNumber_GiftCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, giftCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageRequest_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GiftMessageRequest__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftMessageRequest class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\013\000\003\006\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GiftMessageRequest_Type_RawValue(GiftMessageRequest *message) {
  GPBDescriptor *descriptor = [GiftMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftMessageRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGiftMessageRequest_Type_RawValue(GiftMessageRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GiftMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftMessageRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GiftMessageRequest_Gift_Type

GPBEnumDescriptor *GiftMessageRequest_Gift_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GiftTypeGift\000GiftTypeMoney\000";
    static const int32_t values[] = {
        GiftMessageRequest_Gift_Type_GiftTypeGift,
        GiftMessageRequest_Gift_Type_GiftTypeMoney,
    };
    static const char *extraTextFormatInfo = "\002\000\004\204\204\000\001\004\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GiftMessageRequest_Gift_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GiftMessageRequest_Gift_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GiftMessageRequest_Gift_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case GiftMessageRequest_Gift_Type_GiftTypeGift:
    case GiftMessageRequest_Gift_Type_GiftTypeMoney:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GiftMessageResponse

@implementation GiftMessageResponse

@dynamic resultArray, resultArray_Count;

typedef struct GiftMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultArray;
} GiftMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GiftMessageResponse_Result),
        .number = GiftMessageResponse_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GiftMessageResponse__storage_, resultArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftMessageResponse class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftMessageResponse_Result

@implementation GiftMessageResponse_Result

@dynamic msgId;
@dynamic type;
@dynamic giftNum;
@dynamic giftUnit;
@dynamic giftImg;
@dynamic time;
@dynamic usernick;
@dynamic portrait;

typedef struct GiftMessageResponse_Result__storage_ {
  uint32_t _has_storage_[1];
  GiftMessageResponse_Result_Gift_Type type;
  int32_t giftNum;
  int32_t time;
  NSString *msgId;
  NSString *giftUnit;
  NSString *giftImg;
  NSString *usernick;
  NSString *portrait;
} GiftMessageResponse_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GiftMessageResponse_Result_Gift_Type_EnumDescriptor,
        .number = GiftMessageResponse_Result_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, giftNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftUnit",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_GiftUnit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, giftUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftImg",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_GiftImg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, giftImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "usernick",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_Usernick,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, usernick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portrait",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessageResponse_Result_FieldNumber_Portrait,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GiftMessageResponse_Result__storage_, portrait),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftMessageResponse_Result class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftMessageResponse_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\005\000\003\007\000\004\010\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GiftMessageResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GiftMessageResponse_Result_Type_RawValue(GiftMessageResponse_Result *message) {
  GPBDescriptor *descriptor = [GiftMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftMessageResponse_Result_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGiftMessageResponse_Result_Type_RawValue(GiftMessageResponse_Result *message, int32_t value) {
  GPBDescriptor *descriptor = [GiftMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftMessageResponse_Result_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GiftMessageResponse_Result_Gift_Type

GPBEnumDescriptor *GiftMessageResponse_Result_Gift_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GiftTypeGift\000GiftTypeMoney\000";
    static const int32_t values[] = {
        GiftMessageResponse_Result_Gift_Type_GiftTypeGift,
        GiftMessageResponse_Result_Gift_Type_GiftTypeMoney,
    };
    static const char *extraTextFormatInfo = "\002\000\004\204\204\000\001\004\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GiftMessageResponse_Result_Gift_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GiftMessageResponse_Result_Gift_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GiftMessageResponse_Result_Gift_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case GiftMessageResponse_Result_Gift_Type_GiftTypeGift:
    case GiftMessageResponse_Result_Gift_Type_GiftTypeMoney:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PluginMessageRequest

@implementation PluginMessageRequest

@dynamic type;
@dynamic name;
@dynamic subject;
@dynamic topicId;
@dynamic programId;
@dynamic plugImg;
@dynamic link;
@dynamic time;

typedef struct PluginMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  PluginMessageRequest_Plugin_Type type;
  int32_t time;
  NSString *name;
  NSString *subject;
  NSString *topicId;
  NSString *programId;
  NSString *plugImg;
  NSString *link;
} PluginMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PluginMessageRequest_Plugin_Type_EnumDescriptor,
        .number = PluginMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topicId",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_TopicId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, topicId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "programId",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_ProgramId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, programId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plugImg",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_PlugImg,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, plugImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_Link,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageRequest_FieldNumber_Time,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PluginMessageRequest__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PluginMessageRequest class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PluginMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\007\000\005\t\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PluginMessageRequest_Type_RawValue(PluginMessageRequest *message) {
  GPBDescriptor *descriptor = [PluginMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PluginMessageRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPluginMessageRequest_Type_RawValue(PluginMessageRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PluginMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PluginMessageRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PluginMessageRequest_Plugin_Type

GPBEnumDescriptor *PluginMessageRequest_Plugin_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PluginTypeTopic\000PluginTypeVote\000PluginTyp"
        "eSec\000";
    static const int32_t values[] = {
        PluginMessageRequest_Plugin_Type_PluginTypeTopic,
        PluginMessageRequest_Plugin_Type_PluginTypeVote,
        PluginMessageRequest_Plugin_Type_PluginTypeSec,
    };
    static const char *extraTextFormatInfo = "\003\000\006\204\205\000\001\006\204\204\000\002\006\204\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PluginMessageRequest_Plugin_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PluginMessageRequest_Plugin_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PluginMessageRequest_Plugin_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case PluginMessageRequest_Plugin_Type_PluginTypeTopic:
    case PluginMessageRequest_Plugin_Type_PluginTypeVote:
    case PluginMessageRequest_Plugin_Type_PluginTypeSec:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PluginMessageResponse

@implementation PluginMessageResponse

@dynamic resultArray, resultArray_Count;

typedef struct PluginMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultArray;
} PluginMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PluginMessageResponse_Result),
        .number = PluginMessageResponse_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PluginMessageResponse__storage_, resultArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PluginMessageResponse class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PluginMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PluginMessageResponse_Result

@implementation PluginMessageResponse_Result

@dynamic msgId;
@dynamic type;
@dynamic name;
@dynamic subject;
@dynamic topicId;
@dynamic programId;
@dynamic plugImg;
@dynamic link;
@dynamic usernick;
@dynamic portrait;

typedef struct PluginMessageResponse_Result__storage_ {
  uint32_t _has_storage_[1];
  PluginMessageResponse_Result_Plugin_Type type;
  NSString *msgId;
  NSString *name;
  NSString *subject;
  NSString *topicId;
  NSString *programId;
  NSString *plugImg;
  NSString *link;
  NSString *usernick;
  NSString *portrait;
} PluginMessageResponse_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PluginMessageResponse_Result_Plugin_Type_EnumDescriptor,
        .number = PluginMessageResponse_Result_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_Subject,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topicId",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_TopicId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, topicId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "programId",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_ProgramId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, programId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plugImg",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_PlugImg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, plugImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_Link,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usernick",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_Usernick,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, usernick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portrait",
        .dataTypeSpecific.className = NULL,
        .number = PluginMessageResponse_Result_FieldNumber_Portrait,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PluginMessageResponse_Result__storage_, portrait),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PluginMessageResponse_Result class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PluginMessageResponse_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\005\000\005\007\000\006\t\000\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PluginMessageResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PluginMessageResponse_Result_Type_RawValue(PluginMessageResponse_Result *message) {
  GPBDescriptor *descriptor = [PluginMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PluginMessageResponse_Result_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPluginMessageResponse_Result_Type_RawValue(PluginMessageResponse_Result *message, int32_t value) {
  GPBDescriptor *descriptor = [PluginMessageResponse_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PluginMessageResponse_Result_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PluginMessageResponse_Result_Plugin_Type

GPBEnumDescriptor *PluginMessageResponse_Result_Plugin_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PluginTypeTopic\000PluginTypeVote\000PluginTyp"
        "eSec\000";
    static const int32_t values[] = {
        PluginMessageResponse_Result_Plugin_Type_PluginTypeTopic,
        PluginMessageResponse_Result_Plugin_Type_PluginTypeVote,
        PluginMessageResponse_Result_Plugin_Type_PluginTypeSec,
    };
    static const char *extraTextFormatInfo = "\003\000\006\204\205\000\001\006\204\204\000\002\006\204\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PluginMessageResponse_Result_Plugin_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PluginMessageResponse_Result_Plugin_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PluginMessageResponse_Result_Plugin_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case PluginMessageResponse_Result_Plugin_Type_PluginTypeTopic:
    case PluginMessageResponse_Result_Plugin_Type_PluginTypeVote:
    case PluginMessageResponse_Result_Plugin_Type_PluginTypeSec:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DistinguishMusicMessageResponse

@implementation DistinguishMusicMessageResponse

@dynamic resultArray, resultArray_Count;

typedef struct DistinguishMusicMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultArray;
} DistinguishMusicMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DistinguishMusicMessageResponse_Result),
        .number = DistinguishMusicMessageResponse_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse__storage_, resultArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DistinguishMusicMessageResponse class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DistinguishMusicMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DistinguishMusicMessageResponse_Result

@implementation DistinguishMusicMessageResponse_Result

@dynamic duration;
@dynamic musicOnTime;
@dynamic ablum;
@dynamic artist;
@dynamic giftImg;

typedef struct DistinguishMusicMessageResponse_Result__storage_ {
  uint32_t _has_storage_[1];
  int32_t duration;
  int32_t musicOnTime;
  NSString *ablum;
  NSString *artist;
  NSString *giftImg;
} DistinguishMusicMessageResponse_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = DistinguishMusicMessageResponse_Result_FieldNumber_Duration,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse_Result__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "musicOnTime",
        .dataTypeSpecific.className = NULL,
        .number = DistinguishMusicMessageResponse_Result_FieldNumber_MusicOnTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse_Result__storage_, musicOnTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ablum",
        .dataTypeSpecific.className = NULL,
        .number = DistinguishMusicMessageResponse_Result_FieldNumber_Ablum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse_Result__storage_, ablum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "artist",
        .dataTypeSpecific.className = NULL,
        .number = DistinguishMusicMessageResponse_Result_FieldNumber_Artist,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse_Result__storage_, artist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftImg",
        .dataTypeSpecific.className = NULL,
        .number = DistinguishMusicMessageResponse_Result_FieldNumber_GiftImg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DistinguishMusicMessageResponse_Result__storage_, giftImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DistinguishMusicMessageResponse_Result class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DistinguishMusicMessageResponse_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\013\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DistinguishMusicMessageResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CMDRequest

@implementation CMDRequest

@dynamic action;

typedef struct CMDRequest__storage_ {
  uint32_t _has_storage_[1];
  CMD_TYPE action;
} CMDRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = CMD_TYPE_EnumDescriptor,
        .number = CMDRequest_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CMDRequest__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CMDRequest class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CMDRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CMDRequest_Action_RawValue(CMDRequest *message) {
  GPBDescriptor *descriptor = [CMDRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CMDRequest_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetCMDRequest_Action_RawValue(CMDRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [CMDRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CMDRequest_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CMDResponse

@implementation CMDResponse

@dynamic action;

typedef struct CMDResponse__storage_ {
  uint32_t _has_storage_[1];
  CMD_TYPE action;
} CMDResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = CMD_TYPE_EnumDescriptor,
        .number = CMDResponse_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CMDResponse__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CMDResponse class]
                                     rootClass:[AjmideMessageRoot class]
                                          file:AjmideMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CMDResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CMDResponse_Action_RawValue(CMDResponse *message) {
  GPBDescriptor *descriptor = [CMDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CMDResponse_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetCMDResponse_Action_RawValue(CMDResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [CMDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CMDResponse_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
